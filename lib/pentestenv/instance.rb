# -*- coding: utf-8 -*-

class Pentestenv
  # Pentest-env Instance
  class Instance
    attr_reader :name

    def initialize(vagrant_config, name, type, customization = {})
      @logger = Log4r::Logger.new('vagrant::pentest-env/instance')
      @logger.info("Initializing #{type} `#{name}`")
      @custom = customization
      @config = vagrant_config
      @name = name
      @type = type
      @instance = instance_path(name)
      raise ArgumentError,
            "Specified #{@type} `#{@name}` is not available." unless @instance
    end

    def register
      @logger.info("Registering #{@type} `#{@name}`")
      require @instance
      send(@type, @config)
    end

    private

    def instance_path(instance)
      instance_path = false
      default_path = "#{ENV['PWD']}/#{@type}s/#{instance}"
      custom_path = "#{@custom[@type + 's_path']}/#{instance}"
                    .gsub(/^~/, ENV['HOME'])

      if @custom.key?("#{@type}s_path") \
         && !@custom["#{@type}s_path"].empty? \
         && File.exist?("#{custom_path}.rb")
        instance_path = custom_path
      elsif File.exist?("#{default_path}.rb")
        instance_path = default_path
      end

      @logger.debug("#{@type.capitalize} path is `#{instance_path}`")
      instance_path
    end
  end
end
