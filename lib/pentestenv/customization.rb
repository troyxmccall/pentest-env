require File.expand_path('instance', File.dirname(__FILE__))

class Pentestenv
  # Pentest-env Customizations
  class Customization
    def initialize(custom)
      @logger = Log4r::Logger.new('vagrant::pentest-env/customizations')
      @logger.info("Pentest-env customizations: #{custom}")
      @custom = custom
    end

    def register(config, type = 'instances')
      return unless @custom.key?(type)

      @custom[type].each do |i|
        instance = Pentestenv::Instance.new(config, i.chomp,
                                            type[0...-1], @custom)
        instance.register
        apply instance.name, config
      end
    end

    def apply(iname, config)
      @logger.info("[#{iname}] Applying customizations..")
      apply_customizations(iname, config)
      apply_providers(iname, config)
      apply_provisioners(iname, config)
    end

    def apply_customizations(iname, config)
      customize_boolean iname, config, 'autostart'
      customize iname, config, 'ssh'
      customize iname, config, 'packages'
      customize iname, config, 'commands'
      customize iname, config, 'scripts'
      customize iname, config, 'volumes'
      customize iname, config, 'networks'
    end

    def apply_providers(iname, config)
      customize iname, config, 'vbox'
      customize iname, config, 'docker'
      customize iname, config, 'openstack'
    end

    def apply_provisioners(iname, config)
      customize iname, config, 'chef'
    end

    def customize(iname, config, key)
      customization = _instance_customization(iname, key)
      return unless customization

      send("_custom_#{key}", iname, config, customization)
    end

    def customize_boolean(iname, config, key)
      customization = _instance_customization(iname, key)
      return if customization.nil?

      send("_custom_#{key}", iname, config, customization)
    end

    def self.install_chef(iname, config)
      chef_base_url = 'https://packages.chef.io/stable/debian/8/'
      chef_deb_file = 'chef_12.17.44-1_amd64.deb'
      config.vm.define iname do |i|
        i.vm.provision :shell,
                       inline: 'test -d /opt/chef ||'\
                               "(wget #{chef_base_url}/#{chef_deb_file} -O "\
                               "#{chef_deb_file} && dpkg -i #{chef_deb_file}"\
                               "&& rm #{chef_deb_file})"
      end
    end

    private

    def _custom_autostart(iname, config, customization)
      @logger.info("[#{iname}] Set autostart: #{customization ? 'on' : 'off'}")
      config.vm.define iname, autostart: customization
    end

    def _custom_ssh(iname, config, customization)
      config.vm.define iname do |i|
        customization.each do |k, v|
          @logger.info("[#{iname}] Set SSH setting: `#{k}` => `#{v}`")
          i.ssh.send("#{k}=", v)
        end
      end
    end

    def _custom_packages(iname, config, customization)
      packages = customization.join(' ')
      config.vm.define iname do |i|
        @logger.info("[#{iname}] Setup packages: `#{packages}`")
        i.vm.provision :shell,
                       inline: 'apt-get update&&'\
                               "apt-get -y install #{packages}"
      end
    end

    def _custom_commands(iname, config, customization)
      config.vm.define iname do |i|
        customization.each do |command|
          if command.is_a? Hash
            shell_cmd = {}
            command.each do |k, v|
              shell_cmd[k.to_sym] = v
            end
          else
            shell_cmd = { inline: command }
          end
          @logger.info("[#{iname}] Setup provisioning inline script"\
                       " (commands): `#{shell_cmd}`")
          i.vm.provision :shell, shell_cmd
        end
      end
    end

    def _custom_scripts(iname, config, customization)
      config.vm.define iname do |i|
        customization.each do |script|
          if script.is_a? Hash
            shell_cmd = {}
            script.each do |k, v|
              shell_cmd[k.to_sym] = v
            end
          else
            shell_cmd = { path: script }
          end

          shell_cmd[:path] = _script_path(shell_cmd[:path])
          next unless shell_cmd[:path]

          @logger.info("[#{iname}] Setup provisioning shell script:"\
                       " `#{shell_cmd}`")
          i.vm.provision :shell, shell_cmd
        end
      end
    end

    def _custom_volumes(iname, config, customization)
      config.vm.define iname do |i|
        customization.each do |host, guest|
          @logger.info("[#{iname}] Configure volume: `#{host}` => `#{guest}`")
          i.vm.synced_folder(host, guest)
        end
      end
    end

    def _custom_networks(iname, config, customization)
      config.vm.define iname do |i|
        customization.each do |network|
          network.each do |type, netconfig|
            @logger.info("[#{iname}] Configure #{type}: #{netconfig}")
            i.vm.network(type.to_sym, _hash_keys_to_symbols(netconfig))
          end
        end
      end
    end

    def _custom_vbox(iname, config, customization)
      config.vm.define iname do |i|
        i.vm.provider :virtualbox do |vbox|
          customization.each do |key, value|
            if key == 'customize'
              value.each do |k, v|
                @logger.info("[#{iname}] Customize vbox: `#{k}` => `#{v}`")
                vbox.customize ['modifyvm', :id, "--#{k}", v]
              end
            else
              @logger.info("[#{iname}] Configure vbox: `#{key}` => `#{value}`")
              vbox.send("#{key}=", value)
            end
          end
        end
      end
    end

    def _custom_docker(iname, config, customization)
      config.vm.define iname do |i|
        i.vm.provider :docker do |d|
          customization.each do |k, v|
            @logger.info("[#{iname}] Set Docker config: `#{k}` => `#{v}`")
            d.send("#{k}=", v)
          end
        end
      end
    end

    def _custom_openstack(iname, config, customization)
      config.vm.define iname do |i|
        i.vm.provider :openstack do |d|
          customization.each do |k, v|
            @logger.info("[#{iname}] Set Openstack config: `#{k}` => `#{v}`")
            d.send("#{k}=", v)
          end
        end
      end
    end

    def _custom_chef(iname, config, customization)
      return unless File.directory? "#{ENV['PWD']}/chef-repo/roles"
      Pentestenv::Customization.install_chef(iname, config)
      config.vm.define iname do |i|
        i.vm.provision :chef_solo do |chef|
          chef.install = false
          chef.cookbooks_path = 'berks-cookbooks/'
          chef.roles_path = 'chef-repo/roles'

          customization.each do |key, custom|
            if key == 'recipes'
              custom.each do |recipe|
                @logger.info("[#{iname}][chef] Add recipe `#{recipe}`")
                chef.add_recipe(recipe)
              end
            elsif key == 'roles'
              custom.each do |role|
                @logger.info("[#{iname}][chef] Add role `#{role}`")
                chef.add_role(role)
              end
            elsif key == 'json'
              chef.json = custom
            end
          end
        end
      end
    end

    def _script_path(script)
      script_path = false
      default_path = "#{ENV['PWD']}/scripts/#{script}"
      custom_path = "#{@custom['scripts_path']}/#{script}"
                    .gsub(/^~/, ENV['HOME'])

      if @custom.key?('scripts_path') \
         && !@custom['scripts_path'].empty? && File.exist?(custom_path)
        script_path = custom_path
      elsif File.exist?(default_path)
        script_path = default_path
      end

      @logger.debug("Script path for `#{script}`: `#{script_path}`")
      script_path
    end

    def _instance_customization(name, key)
      customizations = nil
      if @custom.key?(name)\
         && @custom[name].key?(key)
        customizations = @custom[name][key]
      end

      @logger.debug("[#{name}][#{key}] => `#{customizations}`")
      customizations
    end

    def _hash_keys_to_symbols(hash)
      return hash unless hash.is_a?(Hash)
      # rubocop:disable Style/EachWithObject
      hash.inject({}) do |memo, (k, v)|
        memo[k.to_sym] = _hash_keys_to_symbols(v)
        memo
      end
      # rubocop:enable Style/EachWithObject
    end
  end
end
